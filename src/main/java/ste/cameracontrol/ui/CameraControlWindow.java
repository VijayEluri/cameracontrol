/*
 * Camera Control
 * Copyright (C) 2010 Stefano Fornari
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY Stefano Fornari, Stefano Fornari
 * DISCLAIMS THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 */

package ste.cameracontrol.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import org.jdesktop.swingx.JXCollapsiblePane;
import org.jdesktop.swingx.JXDialog;

import ste.cameracontrol.CameraController;
import ste.ptp.PTPException;

/**
 *
 * @author ste
 */
public class CameraControlWindow extends javax.swing.JFrame {

    /**
     * The camera controller
     */
    private CameraController controller;

    /** Creates new form CameraControlWindow */
    public CameraControlWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        commandToolbar = new javax.swing.JToolBar();
        shootButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Camera connection status");
        setBackground(javax.swing.UIManager.getDefaults().getColor("window"));
        setName("connectionframe"); // NOI18N
        setResizable(false);

        label1.setBackground(new java.awt.Color(255, 255, 255));
        label1.setLabelFor(nameLabel);
        label1.setText("Camera:");

        nameLabel.setText("---");
        nameLabel.setName("nameLabel"); // NOI18N

        label2.setLabelFor(statusLabel);
        label2.setText("Status:");

        statusLabel.setText("---");
        statusLabel.setName("statusLabel"); // NOI18N

        commandToolbar.setFloatable(false);
        commandToolbar.setRollover(true);

        shootButton.setText("Shoot");
        shootButton.setFocusable(false);
        shootButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shootButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shootButtonActionPerformed(evt);
            }
        });
        commandToolbar.add(shootButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2)
                    .addComponent(label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(commandToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label2)
                    .addComponent(statusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(commandToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shootButtonActionPerformed
        try {
            controller.shoot();
        } catch (PTPException e) {
            error("Error capturing the picture: " + e.getMessage(), e);
        }
    }//GEN-LAST:event_shootButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CameraControlWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar commandToolbar;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton shootButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables


    // ---------------------------------------------------------- Public methods

    public void setStatus(String status) {
        if (status != null) {
            statusLabel.setText(status);
        } else {
            statusLabel.setText("---");
        }
    }

    public void setCameraDisplayName(String camera) {
        if (camera != null) {
            nameLabel.setText(camera);
        } else {
            nameLabel.setText("---");
        }
    }

    /**
     * @return the controller
     */
    public CameraController getController() {
        return controller;
    }

    /**
     * @param controller the controller to set
     */
    public void setController(CameraController controller) {
        this.controller = controller;
    }

    // --------------------------------------------------------- Private methods

    public void error(final String msg, final Throwable t) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        t.printStackTrace(pw);

        JLabel icon = new JLabel();
        icon.setIcon(UIManager.getIcon("OptionPane.errorIcon"));

        JLabel message = new JLabel();
        if (msg != null) {
            message.setText(msg + " ");
        } else {
            message.setText(t.getMessage() + " ");
        }

        JTextArea text = new JTextArea(sw.toString(), 60, 80);
        text.setCaretPosition(0);
        text.setEditable(false);
        JScrollPane stext = new JScrollPane(text);
        stext.setPreferredSize(new Dimension(500, 200));

        Box content = Box.createHorizontalBox();
        JXDialog dialog = new JXDialog(content);

        JXCollapsiblePane cp = new JXCollapsiblePane(new BorderLayout());
        cp.setAnimated(false);
        cp.addPropertyChangeListener(new CollapseListener(dialog));
        cp.add(stext, BorderLayout.CENTER);

        // get the built-in toggle action
        Action toggleAction = cp.getActionMap().
            get(JXCollapsiblePane.TOGGLE_ACTION);

        // use the collapse/expand icons from the JTree UI
        toggleAction.putValue(
            JXCollapsiblePane.COLLAPSE_ICON,
            UIManager.getIcon("Tree.expandedIcon")
        );
        toggleAction.putValue(
           JXCollapsiblePane.EXPAND_ICON,
           UIManager.getIcon("Tree.collapsedIcon")
        );

        cp.setCollapsed(true);

        JButton toggle = new JButton (toggleAction);
        toggle.setText("");
        toggle.setSize(new Dimension(40,40));

        Box messagePanel = Box.createHorizontalBox();
        messagePanel.add(message);
        messagePanel.add(toggle);

        JPanel exceptionPanel = new JPanel(new BorderLayout());
        exceptionPanel.add(messagePanel, BorderLayout.PAGE_START);
        exceptionPanel.add(cp, BorderLayout.PAGE_END);

        icon.setAlignmentY(TOP_ALIGNMENT);
        exceptionPanel.setAlignmentY(TOP_ALIGNMENT);
        content.add(icon);
        content.add(Box.createRigidArea(new Dimension(5, 5)));
        content.add(exceptionPanel);

        // Show the MODAL dialog

        dialog.setModal(true);
        dialog.pack();
        dialog.setVisible(true);
        dialog.setLocationRelativeTo(CameraControlWindow.this);
    }

    private class CollapseListener implements PropertyChangeListener {
        public static final String PROPERTY_COLLAPTION_STATE = "collapsed";
        private JDialog dialog;

        public CollapseListener(JDialog dialog) {
            this.dialog = dialog;
        }

        public void propertyChange(PropertyChangeEvent e) {
            if (PROPERTY_COLLAPTION_STATE.equals(e.getPropertyName())) {
                dialog.pack();
            }
        }

    }
}
