/*
 * cameracontrol
 * Copyright (C) 2010 Stefano Fornari
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY Stefano Fornari, Stefano Fornari
 * DISCLAIMS THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 */

package ste.cameracontrol.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.imageio.ImageIO;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import org.jdesktop.swingx.JXCollapsiblePane;
import org.jdesktop.swingx.JXDialog;

import ste.cameracontrol.CameraController;
import ste.ptp.PTPException;

/**
 *
 * @author ste
 */
public class CameraControlWindow extends javax.swing.JFrame {

    public static final String ICON_CAMERA_CONNECT    = "images/camera-connect-24x24.png";
    public static final String ICON_CAMERA_DISCONNECT = "images/camera-disconnect-24x24.png";
    public static final String ICON_CAMERACONTROL     = "images/camera-control-24x24.png";

    /**
     * The camera controller
     */
    private CameraController controller;

    /** Creates new form CameraControlWindow */
    public CameraControlWindow() {
        initComponents();
        //Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuEdit = new javax.swing.JMenu();
        menuCamera = new javax.swing.JMenu();
        shootMenuItem = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Camera connection status");
        setBackground(javax.swing.UIManager.getDefaults().getColor("window"));
        setIconImage(getImage(ICON_CAMERACONTROL));
        setMinimumSize(new java.awt.Dimension(400, 300));
        setName("connectionframe"); // NOI18N
        setResizable(false);

        statusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/camera-connect-24x24.png"))); // NOI18N
        statusLabel.setText("Status bar");
        statusLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        statusLabel.setPreferredSize(new java.awt.Dimension(300, 32));
        getContentPane().add(statusLabel, java.awt.BorderLayout.PAGE_END);

        menuFile.setText("File");
        menuBar.add(menuFile);

        menuEdit.setText("Edit");
        menuBar.add(menuEdit);

        menuCamera.setText("Camera");

        shootMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        shootMenuItem.setText("Shoot");
        shootMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shootMenuItemActionPerformed(evt);
            }
        });
        menuCamera.add(shootMenuItem);

        menuBar.add(menuCamera);

        menuHelp.setText("Help");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        menuHelp.add(aboutMenuItem);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shootMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shootMenuItemActionPerformed
        try {
            controller.shoot();
        } catch (PTPException e) {
            error("Error capturing the picture: " + e.getMessage(), e);
        }
    }//GEN-LAST:event_shootMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CameraControlWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuCamera;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem shootMenuItem;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables


    // ---------------------------------------------------------- Public methods

    public void setStatus(String status) {
        if (status != null) {
            statusLabel.setIcon(getIcon(ICON_CAMERA_CONNECT));
            statusLabel.setText(status);
        } else {
            statusLabel.setIcon(getIcon(ICON_CAMERA_DISCONNECT));
            statusLabel.setText("");
        }
    }

    /**
     * @return the controller
     */
    public CameraController getController() {
        return controller;
    }

    /**
     * @param controller the controller to set
     */
    public void setController(CameraController controller) {
        this.controller = controller;
    }

    // --------------------------------------------------------- Private methods

    public void error(final String msg, final Throwable t) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        t.printStackTrace(pw);

        JLabel icon = new JLabel();
        icon.setIcon(UIManager.getIcon("OptionPane.errorIcon"));

        JLabel message = new JLabel();
        if (msg != null) {
            message.setText(msg + " ");
        } else {
            message.setText(t.getMessage() + " ");
        }

        JTextArea text = new JTextArea(sw.toString(), 60, 80);
        text.setCaretPosition(0);
        text.setEditable(false);
        JScrollPane stext = new JScrollPane(text);
        stext.setPreferredSize(new Dimension(500, 200));

        Box content = Box.createHorizontalBox();
        JXDialog dialog = new JXDialog(content);
        dialog.setTitle("Error");
        dialog.setIconImage(getIconImage());

        JXCollapsiblePane cp = new JXCollapsiblePane(new BorderLayout());
        cp.setAnimated(false);
        cp.addPropertyChangeListener(new CollapseListener(dialog));
        cp.add(stext, BorderLayout.CENTER);

        // get the built-in toggle action
        Action toggleAction = cp.getActionMap().
            get(JXCollapsiblePane.TOGGLE_ACTION);

        // use the collapse/expand icons from the JTree UI
        toggleAction.putValue(
            JXCollapsiblePane.COLLAPSE_ICON,
            UIManager.getIcon("Tree.expandedIcon")
        );
        toggleAction.putValue(
           JXCollapsiblePane.EXPAND_ICON,
           UIManager.getIcon("Tree.collapsedIcon")
        );

        cp.setCollapsed(true);

        JButton toggle = new JButton (toggleAction);
        toggle.setText("");
        toggle.setSize(new Dimension(40,40));

        Box messagePanel = Box.createHorizontalBox();
        messagePanel.add(message);
        messagePanel.add(toggle);

        JPanel exceptionPanel = new JPanel(new BorderLayout());
        exceptionPanel.add(messagePanel, BorderLayout.PAGE_START);
        exceptionPanel.add(cp, BorderLayout.PAGE_END);

        icon.setAlignmentY(TOP_ALIGNMENT);
        exceptionPanel.setAlignmentY(TOP_ALIGNMENT);
        content.add(icon);
        content.add(Box.createRigidArea(new Dimension(5, 5)));
        content.add(exceptionPanel);

        // Show the MODAL dialog

        dialog.setModal(true);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private class CollapseListener implements PropertyChangeListener {
        public static final String PROPERTY_COLLAPTION_STATE = "collapsed";
        private JDialog dialog;

        public CollapseListener(JDialog dialog) {
            this.dialog = dialog;
        }

        public void propertyChange(PropertyChangeEvent e) {
            if (PROPERTY_COLLAPTION_STATE.equals(e.getPropertyName())) {
                dialog.pack();
            }
        }

    }

    private ImageIcon getIcon(String name) {
        return new ImageIcon(ClassLoader.getSystemResource(name));
    }

    private Image getImage(String name) {
        try {
            return ImageIO.read(ClassLoader.getSystemResource(name));
        } catch (Exception e) {
            error("", e);
        }

        return null;
    }
}
